#include <ESP32Servo.h>
#include <WiFi.h>

Servo myServo;

// name and password
const char* ssid     = "hello world";
const char* password = "im the goat";

// pins
const int SERVO_PIN   = 23;
const int RED_LED     = 27;
const int YELLOW_LED  = 26; 
const int GREEN_LED   = 25; 

WiFiServer server(80);


bool gateIsOpen = true;


void closeGate(){
  digitalWrite(GREEN_LED, LOW);
  digitalWrite(RED_LED, HIGH);
  delay(2000);
  myServo.write(90);   // close gate
  gateIsOpen = false;
}

void openGate(){
  digitalWrite(RED_LED, LOW);
  digitalWrite(GREEN_LED, HIGH);
  delay(2000);
  myServo.write(0);    // open gate
  gateIsOpen = true;
}

//html
const char PAGE[] PROGMEM = R"HTML(
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>ESP32 Boom Gate</title>
<style>
  body { font-family: system-ui, Arial; margin: 24px; }
  h1 { margin-bottom: 8px; }
  .state { margin: 12px 0 24px; font-size: 1.1rem; }
  .row { display:flex; gap:12px; }
  a.btn {
    display:inline-block; padding:12px 16px; text-decoration:none; 
    border:1px solid #333; border-radius:8px;
  }
</style>
</head>
<body>
  <h1>ESP32 Boom Gate</h1>
  <div class="state">State: %%STATE%%</div>
  <div class="row">
    <a class="btn" href="/open">Open</a>
    <a class="btn" href="/close">Close</a>
    <a class="btn" href="/">Refresh</a>
  </div>
</body>
</html>
)HTML";

// http helpers
void sendPage(WiFiClient& client, const String& stateTxt) {
  // Prepare body with current state
  String body = PAGE;
  body.replace("%%STATE%%", stateTxt);

  client.println("HTTP/1.1 200 OK");
  client.println("Content-Type: text/html; charset=utf-8");
  client.println("Connection: close");
  client.print("Content-Length: ");
  client.println(body.length());
  client.println();
  client.print(body);
}

void sendNotFound(WiFiClient& client) {
  client.println("HTTP/1.1 404 Not Found");
  client.println("Content-Type: text/plain");
  client.println("Connection: close");
  client.println();
  client.println("Not found");
}

void setup() {
  Serial.begin(115200);

  //I/O
  pinMode(RED_LED, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  digitalWrite(YELLOW_LED, LOW); // unused but set low

  myServo.attach(SERVO_PIN);

  //wifi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected. IP address: ");
  Serial.println(WiFi.localIP());

  // HTTP server
  server.begin();
}

void loop() {
  WiFiClient client = server.available();
  if (!client) return;

  //wait for request data
  unsigned long start = millis();
  while (!client.available()) {
    if (millis() - start > 2000) { client.stop(); return; }
    delay(1);
  }

  //read the request line
  String req = client.readStringUntil('\r');
  client.readStringUntil('\n'); // consume LF

  //very simple routing based on the path
  if (req.startsWith("GET /open")) {
    openGate(); 

    sendPage(client, "OPEN");
  } else if (req.startsWith("GET /close")) {
    closeGate();

    sendPage(client, "CLOSED");
  } else if (req.startsWith("GET / ") || req.startsWith("GET /favicon.ico")) {
    sendPage(client, gateIsOpen ? "OPEN" : "CLOSED");
  } else {
    sendNotFound(client);
  }

  //flush and close
  delay(1);
  client.stop();
}
